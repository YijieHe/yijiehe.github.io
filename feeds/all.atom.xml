<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yijie He</title><link href="https://yijiehe.github.io/" rel="alternate"></link><link href="https://yijiehe.github.io/feeds/all.atom.xml" rel="self"></link><id>https://yijiehe.github.io/</id><updated>2020-11-03T00:00:00+00:00</updated><entry><title>Interactive visualization of PhDs awarded in US</title><link href="https://yijiehe.github.io/articles/interactive-visualization-of-phds-awarded-in-us.html" rel="alternate"></link><published>2020-11-03T00:00:00+00:00</published><updated>2020-11-03T00:00:00+00:00</updated><author><name>Yijie</name></author><id>tag:yijiehe.github.io,2020-11-03:/articles/interactive-visualization-of-phds-awarded-in-us.html</id><summary type="html">&lt;p class="first last"&gt;Create dashboard of PhDs awarded in US data&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="about-the-dataset"&gt;
&lt;h2&gt;About the &lt;a class="reference external" href="https://ncses.nsf.gov/pubs/nsf19301/data"&gt;dataset&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Survey of Earned Doctorates, the data source for this report, is an annual census of individuals who receive
research doctoral degrees from accredited U.S. academic institutions. The survey is sponsored by six federal agencies:
National Science Foundation (NSF), National Institutes of Health, Department of Education, National Endowment for the
Humanities, Department of Agriculture, and National Aeronautics and Space Administration. These data are reported in
several publications from NSFâ€™s National Center for Science and Engineering Statistics. The most comprehensive and
widely cited publication is this report, Doctorate Recipients from U.S. Universities.&lt;/p&gt;
&lt;p&gt;This report calls attention to major trends in doctoral education, organized into themes highlighting important
questions about doctorate recipients. Since the original dataset is really large and comprehensive, I will focus on
only two perspectives here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Doctorates by citizenship and fields over years&lt;/li&gt;
&lt;li&gt;Foreign Doctorates by countries and fields over years&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="selected-dataset"&gt;
&lt;h2&gt;Selected dataset&lt;/h2&gt;
&lt;p&gt;Here I display the datasets that are related to the two perspectives above.
The first is foreign doctorates by country and broad fields, and the second is all doctorates by
citizenship and fields of study.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Broad Field&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;173&lt;/th&gt;
      &lt;td&gt;2011&lt;/td&gt;
      &lt;td&gt;Non-science and engineering&lt;/td&gt;
      &lt;td&gt;Japan&lt;/td&gt;
      &lt;td&gt;65&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;153&lt;/th&gt;
      &lt;td&gt;2011&lt;/td&gt;
      &lt;td&gt;Non-science and engineering&lt;/td&gt;
      &lt;td&gt;Thailand&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;121&lt;/th&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;Science and engineering&lt;/td&gt;
      &lt;td&gt;Iran&lt;/td&gt;
      &lt;td&gt;D&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;181&lt;/th&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;Science and engineering&lt;/td&gt;
      &lt;td&gt;Mexico&lt;/td&gt;
      &lt;td&gt;171&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;101&lt;/th&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;Science and engineering&lt;/td&gt;
      &lt;td&gt;Canada&lt;/td&gt;
      &lt;td&gt;387&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;citizenship&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Year&lt;/th&gt;
      &lt;th&gt;Citizenship&lt;/th&gt;
      &lt;th&gt;Fields of study&lt;/th&gt;
      &lt;th&gt;Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;47&lt;/th&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;U.S. citizen or permanent resident&lt;/td&gt;
      &lt;td&gt;Physical sciences and earth sciences&lt;/td&gt;
      &lt;td&gt;3148&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;161&lt;/th&gt;
      &lt;td&gt;1987&lt;/td&gt;
      &lt;td&gt;Unknown&lt;/td&gt;
      &lt;td&gt;Humanities and arts&lt;/td&gt;
      &lt;td&gt;267&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;92&lt;/th&gt;
      &lt;td&gt;1992&lt;/td&gt;
      &lt;td&gt;Temporary visa holder&lt;/td&gt;
      &lt;td&gt;Psychology and social sciences&lt;/td&gt;
      &lt;td&gt;1158&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;150&lt;/th&gt;
      &lt;td&gt;2002&lt;/td&gt;
      &lt;td&gt;U.S. citizen or permanent resident&lt;/td&gt;
      &lt;td&gt;Humanities and arts&lt;/td&gt;
      &lt;td&gt;4320&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;82&lt;/th&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;Unknown&lt;/td&gt;
      &lt;td&gt;Mathematics and computer sciences&lt;/td&gt;
      &lt;td&gt;252&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="dashboard-visualization"&gt;
&lt;h2&gt;Dashboard visualization&lt;/h2&gt;
&lt;p&gt;For creating a dashboard, I used &lt;strong&gt;dash&lt;/strong&gt; and &lt;strong&gt;plotly&lt;/strong&gt; package.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly.express&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;px&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jupyter_dash&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jupyter_dash&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JupyterDash&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dash_core_components&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dcc&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dash_html_components&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;html&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dash.dependencies&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A dashboard for doctoral recipients by citizenship can be created by the fllowing:&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;external_stylesheets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'https://codepen.io/chriddyp/pen/bWLwgP.css'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JupyterDash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;external_stylesheets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;external_stylesheets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'graph-with-slider'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Slider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'year-slider'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;citizenship&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;citizenship&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;citizenship&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;citizenship&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()},&lt;/span&gt;
        &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'graph-with-slider'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'figure'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'year-slider'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected_year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filtered_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;citizenship&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;citizenship&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Year&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;selected_year&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filtered_df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fields of study&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Citizenship&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Doctorate recipients by citizenship from 1987-2017&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#fig.update_layout(transition_duration=500)&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;barmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;



&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'inline'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A dashboard for doctoral recipients by country can be created by the following:&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JupyterDash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;external_stylesheets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;external_stylesheets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'graph-with-slider'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Slider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'year-slider'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Year'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()},&lt;/span&gt;
        &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'graph-with-slider'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'figure'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'year-slider'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected_year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;filtered_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Year&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;selected_year&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filtered_df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Broad Field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Doctorate recipients by country from 2008-2017&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#fig.update_layout(transition_duration=500)&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;barmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'group'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;



&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'inline'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="Projects"></category></entry><entry><title>Retrieve Data from Starwars API</title><link href="https://yijiehe.github.io/articles/retrieve-data-from-starwars-api.html" rel="alternate"></link><published>2020-10-19T00:00:00+00:00</published><updated>2020-10-19T00:00:00+00:00</updated><author><name>Yijie</name></author><id>tag:yijiehe.github.io,2020-10-19:/articles/retrieve-data-from-starwars-api.html</id><summary type="html">&lt;p class="first last"&gt;Find Oldest Character in Starwars Series&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="starwars-api"&gt;
&lt;h2&gt;Starwars API&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="(https://swapi.dev/documentation"&gt;Starwars API(swapi)&lt;/a&gt; allows you to retrieve information about the
Starwars series through HTTP request. It has a quite comprehensive documentation about the Starwar universe.
In Python, HTTP requests can be achieved by the &lt;strong&gt;requests&lt;/strong&gt; package. For this project, we will use this package
to acquire data from swapi and find the oldest character that is available in the given dataset.&lt;/p&gt;
&lt;div class="section" id="import-and-format-data"&gt;
&lt;h3&gt;Import and Format data&lt;/h3&gt;
&lt;p&gt;The requested data is in JSON format. We need to transform it into pandas dataframe so that
we can more easily handle it.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://swapi.dev/api/people/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;starwar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;height&lt;/th&gt;
      &lt;th&gt;mass&lt;/th&gt;
      &lt;th&gt;hair_color&lt;/th&gt;
      &lt;th&gt;skin_color&lt;/th&gt;
      &lt;th&gt;eye_color&lt;/th&gt;
      &lt;th&gt;birth_year&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
      &lt;th&gt;homeworld&lt;/th&gt;
      &lt;th&gt;films&lt;/th&gt;
      &lt;th&gt;species&lt;/th&gt;
      &lt;th&gt;vehicles&lt;/th&gt;
      &lt;th&gt;starships&lt;/th&gt;
      &lt;th&gt;created&lt;/th&gt;
      &lt;th&gt;edited&lt;/th&gt;
      &lt;th&gt;url&lt;/th&gt;
      &lt;th&gt;detail&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Luke Skywalker&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;blond&lt;/td&gt;
      &lt;td&gt;fair&lt;/td&gt;
      &lt;td&gt;blue&lt;/td&gt;
      &lt;td&gt;19BBY&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/films/1/, http://swapi.d...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/vehicles/14/, http://swa...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/starships/12/, http://sw...&lt;/td&gt;
      &lt;td&gt;2014-12-09T13:50:51.644000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:56.891000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/1/&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;C-3PO&lt;/td&gt;
      &lt;td&gt;167&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;gold&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;112BBY&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/films/1/, http://swapi.d...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/2/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:10:51.357000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.309000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/2/&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;R2-D2&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;white, blue&lt;/td&gt;
      &lt;td&gt;red&lt;/td&gt;
      &lt;td&gt;33BBY&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/8/&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/films/1/, http://swapi.d...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/2/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:11:50.376000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.311000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/3/&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Darth Vader&lt;/td&gt;
      &lt;td&gt;202&lt;/td&gt;
      &lt;td&gt;136&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;white&lt;/td&gt;
      &lt;td&gt;yellow&lt;/td&gt;
      &lt;td&gt;41.9BBY&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/1/&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/films/1/, http://swapi.d...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/starships/13/]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:18:20.704000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.313000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/4/&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Leia Organa&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
      &lt;td&gt;49&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;light&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;19BBY&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/2/&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/films/1/, http://swapi.d...&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/vehicles/30/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-10T15:20:09.791000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.315000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/5/&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="find-the-oldest-character"&gt;
&lt;h3&gt;Find the oldest character&lt;/h3&gt;
&lt;p&gt;Note that the chronicles in Starwars universe is different from ours. In Starwar, people's
birth years are given either BBY(Before the Battle of Yevin) or ABY(After the Battle of Yevin).
Since we do not have information about the death year of the character, we will assume that character with
earliest birth year is the oldest, although it is not precise because robots can probably live forever if
they are not destroyed in a battle.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;i_BBY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'(BBY)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;i_ABY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'(ABY)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that we do not have any character born ABY given our dataset.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i_ABY&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Series([], Name: birth_year, dtype: object)
&lt;/pre&gt;
&lt;p&gt;Then we find all characters born BBY and find the oldest one.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i_BBY&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
0       19BBY
1      112BBY
2       33BBY
3     41.9BBY
4       19BBY
5       52BBY
6       47BBY
8       24BBY
9       57BBY
10    41.9BBY
11      64BBY
12     200BBY
13      29BBY
14      44BBY
15     600BBY
17      21BBY
19     896BBY
20      82BBY
21    31.5BBY
22      15BBY
23      53BBY
24      31BBY
25      37BBY
26      41BBY
27      48BBY
29       8BBY
31      92BBY
33      91BBY
34      46BBY
35      52BBY
41      62BBY
42      72BBY
43      54BBY
45      48BBY
50      72BBY
51      92BBY
57      22BBY
61      82BBY
63      58BBY
64      40BBY
66     102BBY
67      67BBY
68      66BBY
Name: birth_year, dtype: object
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i_BBY&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
     &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'(\d+)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
     &lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
     &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
0    896
dtype: int64
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birth_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;896&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;height&lt;/th&gt;
      &lt;th&gt;mass&lt;/th&gt;
      &lt;th&gt;hair_color&lt;/th&gt;
      &lt;th&gt;skin_color&lt;/th&gt;
      &lt;th&gt;eye_color&lt;/th&gt;
      &lt;th&gt;birth_year&lt;/th&gt;
      &lt;th&gt;gender&lt;/th&gt;
      &lt;th&gt;homeworld&lt;/th&gt;
      &lt;th&gt;films&lt;/th&gt;
      &lt;th&gt;species&lt;/th&gt;
      &lt;th&gt;vehicles&lt;/th&gt;
      &lt;th&gt;starships&lt;/th&gt;
      &lt;th&gt;created&lt;/th&gt;
      &lt;th&gt;edited&lt;/th&gt;
      &lt;th&gt;url&lt;/th&gt;
      &lt;th&gt;detail&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;Yoda&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;white&lt;/td&gt;
      &lt;td&gt;green&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
      &lt;td&gt;896BBY&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/planets/28/&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/films/2/, http://swapi.d...&lt;/td&gt;
      &lt;td&gt;[http://swapi.dev/api/species/6/]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;[]&lt;/td&gt;
      &lt;td&gt;2014-12-15T12:26:01.042000Z&lt;/td&gt;
      &lt;td&gt;2014-12-20T21:17:50.345000Z&lt;/td&gt;
      &lt;td&gt;http://swapi.dev/api/people/20/&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="which-films-did-master-yoda-appear"&gt;
&lt;h3&gt;Which films did Master Yoda appear?&lt;/h3&gt;
&lt;p&gt;Now we have found Yoda to be the oldest character. We are interested in the films that he was active.
We can find it through the &lt;em&gt;film&lt;/em&gt; endpoint in swapi.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;film_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;films&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;starwar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Yoda&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;film&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;film_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;film&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;film_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;film&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;film&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;span class="n"&gt;film_title&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
   ['The Empire Strikes Back',
    'Return of the Jedi',
    'The Phantom Menace',
    'Attack of the Clones',
    'Revenge of the Sith']

Yoda appeared in the above 5 films.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Projects"></category></entry><entry><title>Construct a SQL Database of Spotify Songs in 3rd Normal Form (3NF)</title><link href="https://yijiehe.github.io/articles/construct-a-sql-database-of-spotify-songs-in-3rd-normal-form-3nf.html" rel="alternate"></link><published>2020-10-06T00:00:00+00:00</published><updated>2020-10-06T00:00:00+00:00</updated><author><name>Yijie</name></author><id>tag:yijiehe.github.io,2020-10-06:/articles/construct-a-sql-database-of-spotify-songs-in-3rd-normal-form-3nf.html</id><summary type="html">&lt;p class="first last"&gt;Convert pandas dataframe to sql database&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="data-nomalization"&gt;
&lt;h2&gt;Data Nomalization&lt;/h2&gt;
&lt;p&gt;Database Normalization is a technique of organizing the data in the database. Normalization is a systematic
approach of decomposing tables to eliminate data redundancy(repetition) and undesirable characteristics
like Insertion, Update and Deletion Anomalies. It is a multi-step process that puts data into tabular form,
removing duplicated data from the relation tables.&lt;/p&gt;
&lt;p&gt;Normalization is used for mainly two purposes,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Eliminating redundant(useless) data.&lt;/li&gt;
&lt;li&gt;Ensuring data dependencies make sense i.e data is logically stored.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="first-normal-form-1nf"&gt;
&lt;h3&gt;First normal form (1NF)&lt;/h3&gt;
&lt;p&gt;For a table to be in the First Normal Form, it should follow the following 4 rules:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It should only have single(atomic) valued attributes/columns.&lt;/li&gt;
&lt;li&gt;Values stored in a column should be of the same domain&lt;/li&gt;
&lt;li&gt;All the columns in a table should have unique names.&lt;/li&gt;
&lt;li&gt;And the order in which data is stored, does not matter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="second-normal-form-2nf"&gt;
&lt;h3&gt;Second normal form (2NF)&lt;/h3&gt;
&lt;p&gt;For a table to be in the Second Normal Form,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It should be in the First Normal form.&lt;/li&gt;
&lt;li&gt;And, it should not have Partial Dependency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="third-normal-form-3nf"&gt;
&lt;h3&gt;Third normal form (3NF)&lt;/h3&gt;
&lt;p&gt;A table is said to be in the Third Normal Form when,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is in the Second Normal form.&lt;/li&gt;
&lt;li&gt;And, it doesn't have Transitive Dependency.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-spotify-songs-dataset"&gt;
&lt;h2&gt;The Spotify Songs Dataset&lt;/h2&gt;
&lt;p&gt;The original data can be found &lt;a class="reference external" href="https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-21/readme.md"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let's see how it looks like:&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_id&lt;/th&gt;
      &lt;th&gt;track_name&lt;/th&gt;
      &lt;th&gt;track_artist&lt;/th&gt;
      &lt;th&gt;track_popularity&lt;/th&gt;
      &lt;th&gt;track_album_id&lt;/th&gt;
      &lt;th&gt;track_album_name&lt;/th&gt;
      &lt;th&gt;track_album_release_date&lt;/th&gt;
      &lt;th&gt;playlist_name&lt;/th&gt;
      &lt;th&gt;playlist_id&lt;/th&gt;
      &lt;th&gt;playlist_genre&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;loudness&lt;/th&gt;
      &lt;th&gt;mode&lt;/th&gt;
      &lt;th&gt;speechiness&lt;/th&gt;
      &lt;th&gt;acousticness&lt;/th&gt;
      &lt;th&gt;instrumentalness&lt;/th&gt;
      &lt;th&gt;liveness&lt;/th&gt;
      &lt;th&gt;valence&lt;/th&gt;
      &lt;th&gt;tempo&lt;/th&gt;
      &lt;th&gt;duration_ms&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;6f807x0ima9a1j3VPbc7VN&lt;/td&gt;
      &lt;td&gt;I Don't Care (with Justin Bieber) - Loud Luxur...&lt;/td&gt;
      &lt;td&gt;Ed Sheeran&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;2oCs0DGTsRO98Gh5ZSl2Cx&lt;/td&gt;
      &lt;td&gt;I Don't Care (with Justin Bieber) [Loud Luxury...&lt;/td&gt;
      &lt;td&gt;2019-06-14&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-2.634&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0583&lt;/td&gt;
      &lt;td&gt;0.1020&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0653&lt;/td&gt;
      &lt;td&gt;0.518&lt;/td&gt;
      &lt;td&gt;122.036&lt;/td&gt;
      &lt;td&gt;194754&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0r7CVbZTWZgbTCYdfa2P31&lt;/td&gt;
      &lt;td&gt;Memories - Dillon Francis Remix&lt;/td&gt;
      &lt;td&gt;Maroon 5&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;63rPSO264uRjW1X5E6cWv6&lt;/td&gt;
      &lt;td&gt;Memories (Dillon Francis Remix)&lt;/td&gt;
      &lt;td&gt;2019-12-13&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;-4.969&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0373&lt;/td&gt;
      &lt;td&gt;0.0724&lt;/td&gt;
      &lt;td&gt;0.004210&lt;/td&gt;
      &lt;td&gt;0.3570&lt;/td&gt;
      &lt;td&gt;0.693&lt;/td&gt;
      &lt;td&gt;99.972&lt;/td&gt;
      &lt;td&gt;162600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1z1Hg7Vb0AhHDiEmnDE79l&lt;/td&gt;
      &lt;td&gt;All the Time - Don Diablo Remix&lt;/td&gt;
      &lt;td&gt;Zara Larsson&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;1HoSmj2eLcsrR0vE9gThr4&lt;/td&gt;
      &lt;td&gt;All the Time (Don Diablo Remix)&lt;/td&gt;
      &lt;td&gt;2019-07-05&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3.432&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0742&lt;/td&gt;
      &lt;td&gt;0.0794&lt;/td&gt;
      &lt;td&gt;0.000023&lt;/td&gt;
      &lt;td&gt;0.1100&lt;/td&gt;
      &lt;td&gt;0.613&lt;/td&gt;
      &lt;td&gt;124.008&lt;/td&gt;
      &lt;td&gt;176616&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;75FpbthrwQmzHlBJLuGdC7&lt;/td&gt;
      &lt;td&gt;Call You Mine - Keanu Silva Remix&lt;/td&gt;
      &lt;td&gt;The Chainsmokers&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;1nqYsOef1yKKuGOVchbsk6&lt;/td&gt;
      &lt;td&gt;Call You Mine - The Remixes&lt;/td&gt;
      &lt;td&gt;2019-07-19&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;-3.778&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.1020&lt;/td&gt;
      &lt;td&gt;0.0287&lt;/td&gt;
      &lt;td&gt;0.000009&lt;/td&gt;
      &lt;td&gt;0.2040&lt;/td&gt;
      &lt;td&gt;0.277&lt;/td&gt;
      &lt;td&gt;121.956&lt;/td&gt;
      &lt;td&gt;169093&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1e8PAfcKUYoKkxPhrHqw4x&lt;/td&gt;
      &lt;td&gt;Someone You Loved - Future Humans Remix&lt;/td&gt;
      &lt;td&gt;Lewis Capaldi&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;7m7vv9wlQ4i0LFuJiE2zsQ&lt;/td&gt;
      &lt;td&gt;Someone You Loved (Future Humans Remix)&lt;/td&gt;
      &lt;td&gt;2019-03-05&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-4.672&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0359&lt;/td&gt;
      &lt;td&gt;0.0803&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0833&lt;/td&gt;
      &lt;td&gt;0.725&lt;/td&gt;
      &lt;td&gt;123.976&lt;/td&gt;
      &lt;td&gt;189052&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows Ã— 23 columns&lt;/p&gt;
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The columns of the data are:&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Index(['track_id', 'track_name', 'track_artist', 'track_popularity',
       'track_album_id', 'track_album_name', 'track_album_release_date',
       'playlist_name', 'playlist_id', 'playlist_genre', 'playlist_subgenre',
       'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',
       'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',
       'duration_ms'],
      dtype='object')
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Data Nomalization&lt;/h2&gt;
&lt;p&gt;Since the original data columns are single valued, and the all columns contain information in the same
domain, it is in 1NF. However, it is obvious that the Spotify dataframe has information about these fields:
&lt;strong&gt;track&lt;/strong&gt;, &lt;strong&gt;album&lt;/strong&gt; and &lt;strong&gt;playlists&lt;/strong&gt;. In addition, notice that &lt;strong&gt;subgenre&lt;/strong&gt; also depends on the &lt;strong&gt;genre&lt;/strong&gt; column.
So we need to seperate these information into different tables.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[:,[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,[&lt;/span&gt;&lt;span class="s1"&gt;'track_album_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'track_album_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'track_album_release_date'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
         &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'track_album_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;playlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,[&lt;/span&gt;&lt;span class="s1"&gt;'playlist_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'playlist_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'playlist_subgenre'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'playlist_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;genre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,[&lt;/span&gt;&lt;span class="s1"&gt;'playlist_subgenre'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'playlist_genre'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
         &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'playlist_subgenre'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we have 4 dataframes. Let's look at them.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;track&lt;/strong&gt; table has all the information about a single song besides album and playlist.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_id&lt;/th&gt;
      &lt;th&gt;track_name&lt;/th&gt;
      &lt;th&gt;track_artist&lt;/th&gt;
      &lt;th&gt;track_popularity&lt;/th&gt;
      &lt;th&gt;track_album_id&lt;/th&gt;
      &lt;th&gt;playlist_id&lt;/th&gt;
      &lt;th&gt;danceability&lt;/th&gt;
      &lt;th&gt;energy&lt;/th&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;loudness&lt;/th&gt;
      &lt;th&gt;mode&lt;/th&gt;
      &lt;th&gt;speechiness&lt;/th&gt;
      &lt;th&gt;acousticness&lt;/th&gt;
      &lt;th&gt;instrumentalness&lt;/th&gt;
      &lt;th&gt;liveness&lt;/th&gt;
      &lt;th&gt;valence&lt;/th&gt;
      &lt;th&gt;tempo&lt;/th&gt;
      &lt;th&gt;duration_ms&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;6f807x0ima9a1j3VPbc7VN&lt;/td&gt;
      &lt;td&gt;I Don't Care (with Justin Bieber) - Loud Luxur...&lt;/td&gt;
      &lt;td&gt;Ed Sheeran&lt;/td&gt;
      &lt;td&gt;66&lt;/td&gt;
      &lt;td&gt;2oCs0DGTsRO98Gh5ZSl2Cx&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;0.748&lt;/td&gt;
      &lt;td&gt;0.916&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-2.634&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0583&lt;/td&gt;
      &lt;td&gt;0.1020&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0653&lt;/td&gt;
      &lt;td&gt;0.518&lt;/td&gt;
      &lt;td&gt;122.036&lt;/td&gt;
      &lt;td&gt;194754&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0r7CVbZTWZgbTCYdfa2P31&lt;/td&gt;
      &lt;td&gt;Memories - Dillon Francis Remix&lt;/td&gt;
      &lt;td&gt;Maroon 5&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;63rPSO264uRjW1X5E6cWv6&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;0.726&lt;/td&gt;
      &lt;td&gt;0.815&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;-4.969&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0373&lt;/td&gt;
      &lt;td&gt;0.0724&lt;/td&gt;
      &lt;td&gt;0.004210&lt;/td&gt;
      &lt;td&gt;0.3570&lt;/td&gt;
      &lt;td&gt;0.693&lt;/td&gt;
      &lt;td&gt;99.972&lt;/td&gt;
      &lt;td&gt;162600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1z1Hg7Vb0AhHDiEmnDE79l&lt;/td&gt;
      &lt;td&gt;All the Time - Don Diablo Remix&lt;/td&gt;
      &lt;td&gt;Zara Larsson&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;1HoSmj2eLcsrR0vE9gThr4&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;0.675&lt;/td&gt;
      &lt;td&gt;0.931&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3.432&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0.0742&lt;/td&gt;
      &lt;td&gt;0.0794&lt;/td&gt;
      &lt;td&gt;0.000023&lt;/td&gt;
      &lt;td&gt;0.1100&lt;/td&gt;
      &lt;td&gt;0.613&lt;/td&gt;
      &lt;td&gt;124.008&lt;/td&gt;
      &lt;td&gt;176616&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;75FpbthrwQmzHlBJLuGdC7&lt;/td&gt;
      &lt;td&gt;Call You Mine - Keanu Silva Remix&lt;/td&gt;
      &lt;td&gt;The Chainsmokers&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;1nqYsOef1yKKuGOVchbsk6&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;0.718&lt;/td&gt;
      &lt;td&gt;0.930&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;-3.778&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.1020&lt;/td&gt;
      &lt;td&gt;0.0287&lt;/td&gt;
      &lt;td&gt;0.000009&lt;/td&gt;
      &lt;td&gt;0.2040&lt;/td&gt;
      &lt;td&gt;0.277&lt;/td&gt;
      &lt;td&gt;121.956&lt;/td&gt;
      &lt;td&gt;169093&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1e8PAfcKUYoKkxPhrHqw4x&lt;/td&gt;
      &lt;td&gt;Someone You Loved - Future Humans Remix&lt;/td&gt;
      &lt;td&gt;Lewis Capaldi&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;7m7vv9wlQ4i0LFuJiE2zsQ&lt;/td&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;0.650&lt;/td&gt;
      &lt;td&gt;0.833&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-4.672&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0359&lt;/td&gt;
      &lt;td&gt;0.0803&lt;/td&gt;
      &lt;td&gt;0.000000&lt;/td&gt;
      &lt;td&gt;0.0833&lt;/td&gt;
      &lt;td&gt;0.725&lt;/td&gt;
      &lt;td&gt;123.976&lt;/td&gt;
      &lt;td&gt;189052&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;album&lt;/strong&gt; table has each album's name and date.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;track_album_id&lt;/th&gt;
      &lt;th&gt;track_album_name&lt;/th&gt;
      &lt;th&gt;track_album_release_date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2oCs0DGTsRO98Gh5ZSl2Cx&lt;/td&gt;
      &lt;td&gt;I Don't Care (with Justin Bieber) [Loud Luxury...&lt;/td&gt;
      &lt;td&gt;2019-06-14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;63rPSO264uRjW1X5E6cWv6&lt;/td&gt;
      &lt;td&gt;Memories (Dillon Francis Remix)&lt;/td&gt;
      &lt;td&gt;2019-12-13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1HoSmj2eLcsrR0vE9gThr4&lt;/td&gt;
      &lt;td&gt;All the Time (Don Diablo Remix)&lt;/td&gt;
      &lt;td&gt;2019-07-05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1nqYsOef1yKKuGOVchbsk6&lt;/td&gt;
      &lt;td&gt;Call You Mine - The Remixes&lt;/td&gt;
      &lt;td&gt;2019-07-19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;7m7vv9wlQ4i0LFuJiE2zsQ&lt;/td&gt;
      &lt;td&gt;Someone You Loved (Future Humans Remix)&lt;/td&gt;
      &lt;td&gt;2019-03-05&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;playlist&lt;/strong&gt; table has each playlist's name and genre.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;playlist_id&lt;/th&gt;
      &lt;th&gt;playlist_name&lt;/th&gt;
      &lt;th&gt;playlist_subgenre&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;37i9dQZF1DXcZDD7cfEKhW&lt;/td&gt;
      &lt;td&gt;Pop Remix&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;70&lt;/th&gt;
      &lt;td&gt;37i9dQZF1DWZQaaqNMbbXa&lt;/td&gt;
      &lt;td&gt;Dance Pop&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;167&lt;/th&gt;
      &lt;td&gt;37i9dQZF1DX2ENAPP1Tyed&lt;/td&gt;
      &lt;td&gt;Dance Room&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;223&lt;/th&gt;
      &lt;td&gt;37i9dQZF1DWSJHnPb1f0X3&lt;/td&gt;
      &lt;td&gt;Cardio&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;272&lt;/th&gt;
      &lt;td&gt;37i9dQZF1DX6pH08wMhkaI&lt;/td&gt;
      &lt;td&gt;Dance Pop Hits&lt;/td&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong&gt;genre&lt;/strong&gt; table maps each subgenre to a genre.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;playlist_subgenre&lt;/th&gt;
      &lt;th&gt;playlist_genre&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;dance pop&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1298&lt;/th&gt;
      &lt;td&gt;post-teen pop&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2427&lt;/th&gt;
      &lt;td&gt;electropop&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3835&lt;/th&gt;
      &lt;td&gt;indie poptimism&lt;/td&gt;
      &lt;td&gt;pop&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5507&lt;/th&gt;
      &lt;td&gt;hip hop&lt;/td&gt;
      &lt;td&gt;rap&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After seperating the columns, the original dataframe is normalizd into 3NF. The next thing is to
save them into SQL. There are many ways to do so. I used the package &lt;strong&gt;sqlite3&lt;/strong&gt; for this project.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'spotify.db'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'track'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_exists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'replace'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'album'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_exists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'replace'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;playlist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'playlist'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_exists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'replace'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'genre'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_exists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'replace'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sample-query"&gt;
&lt;h2&gt;Sample query&lt;/h2&gt;
&lt;p&gt;Suppose we want to find all the playlists that contains instruments.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'''SELECT distinct playlist.playlist_name
           FROM playlist
           INNER JOIN track
           ON track.playlist_id = playlist.playlist_id
           WHERE track.instrumentalness &amp;gt; 0
           ORDER BY track.instrumentalness DESC
           LIMIT 10
'''&lt;/span&gt;

&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;playlist_name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;90s Dance Hits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;RUSSIAN Gangster Rap&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Sunny Beats&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Indie/Jazz Poptimism&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Tropical Nights&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;INDIE POP! TUNES&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;URBAN NATION&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;ALPAS Music Festival&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Tropical Vibes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Alex Workout&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
</content><category term="Projects"></category></entry><entry><title>Visualize malaria datasets</title><link href="https://yijiehe.github.io/articles/visualize-malaria-datasets.html" rel="alternate"></link><published>2020-09-19T00:00:00+00:00</published><updated>2020-09-19T00:00:00+00:00</updated><author><name>Yijie</name></author><id>tag:yijiehe.github.io,2020-09-19:/articles/visualize-malaria-datasets.html</id><summary type="html">&lt;p class="first last"&gt;Visualization of malaria data&lt;/p&gt;
</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13"&gt;original dataset&lt;/a&gt;
is part of Tidytuesday weekly data projects. It contains 3 tables, which inclde worldwide malaria death rate
and incidence from 1990 to 2016.&lt;/p&gt;
&lt;p&gt;The visualizations were plotted with &lt;strong&gt;pandas_bokeh&lt;/strong&gt; and &lt;strong&gt;plotnine&lt;/strong&gt; packages. Pandas_bokeh provides powerful
tools for interactive mapping plot. For the death rate and incidence mapping, there are slider bars that enable
users to scroll over years to see status for each country. Plotnine is a declarative system of creating graphics
based on &lt;a class="reference external" href="https://ggplot2.tidyverse.org"&gt;ggplot&lt;/a&gt;. As an implementation of Grammar of Graphics, it allows users to
create graphics explicitly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preview-dataset"&gt;
&lt;h2&gt;Preview dataset&lt;/h2&gt;
&lt;div class="section" id="malaria-death-by-country-across-the-world-and-time"&gt;
&lt;h3&gt;&lt;em&gt;Malaria death by country across the world and time&lt;/em&gt;&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="29%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="40%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Entity&lt;/th&gt;
&lt;th class="head"&gt;Code&lt;/th&gt;
&lt;th class="head"&gt;Year&lt;/th&gt;
&lt;th class="head"&gt;Deaths/100,000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1990&lt;/td&gt;
&lt;td&gt;6.802930&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1991&lt;/td&gt;
&lt;td&gt;6.973494&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1992&lt;/td&gt;
&lt;td&gt;6.989882&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1993&lt;/td&gt;
&lt;td&gt;7.088983&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1994&lt;/td&gt;
&lt;td&gt;7.392472&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="malaria-death-across-the-world-by-age-group-country-and-time"&gt;
&lt;h3&gt;&lt;em&gt;Malaria death across the world by age group, country and time&lt;/em&gt;&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="14%" /&gt;
&lt;col width="14%" /&gt;
&lt;col width="24%" /&gt;
&lt;col width="24%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Entity&lt;/th&gt;
&lt;th class="head"&gt;Code&lt;/th&gt;
&lt;th class="head"&gt;Year&lt;/th&gt;
&lt;th class="head"&gt;age_group&lt;/th&gt;
&lt;th class="head"&gt;Deaths&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1990&lt;/td&gt;
&lt;td&gt;Under 5&lt;/td&gt;
&lt;td&gt;184.606435&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1991&lt;/td&gt;
&lt;td&gt;Under 5&lt;/td&gt;
&lt;td&gt;191.658193&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1992&lt;/td&gt;
&lt;td&gt;Under 5&lt;/td&gt;
&lt;td&gt;197.140197&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1993&lt;/td&gt;
&lt;td&gt;Under 5&lt;/td&gt;
&lt;td&gt;207.357753&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;1994&lt;/td&gt;
&lt;td&gt;Under 5&lt;/td&gt;
&lt;td&gt;226.209363&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="malaria-incidence-across-the-world-by-country-and-time"&gt;
&lt;h3&gt;&lt;em&gt;Malaria incidence across the world by country and time&lt;/em&gt;&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="27%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="44%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Entity&lt;/th&gt;
&lt;th class="head"&gt;Code&lt;/th&gt;
&lt;th class="head"&gt;Year&lt;/th&gt;
&lt;th class="head"&gt;Incidence/100,000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;107.100000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;2005&lt;/td&gt;
&lt;td&gt;46.500000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;23.900000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Afghanistan&lt;/td&gt;
&lt;td&gt;AFG&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;23.600000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Algeria&lt;/td&gt;
&lt;td&gt;DZA&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;0.037746&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="visualization"&gt;
&lt;h2&gt;Visualization&lt;/h2&gt;
&lt;div class="section" id="mapping-malaria-incidence-by-country"&gt;
&lt;h3&gt;&lt;em&gt;Mapping malaria incidence by country&lt;/em&gt;&lt;/h3&gt;
&lt;img alt="mapplot of malaria incidence across the world." src="/images/worldmap_inc.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mapping-annual-death-rate-from-malaria-by-country"&gt;
&lt;h3&gt;&lt;em&gt;Mapping annual death rate from malaria by country&lt;/em&gt;&lt;/h3&gt;
&lt;img alt="" src="/images/worldmap_death.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="worldwide-death-from-malaria-summary-by-age-group"&gt;
&lt;h3&gt;&lt;em&gt;Worldwide death from malaria summary by age group&lt;/em&gt;&lt;/h3&gt;
&lt;img alt="" src="/images/age_group.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="malaria-incidence-of-by-income-group"&gt;
&lt;h3&gt;&lt;em&gt;Malaria incidence of by income group&lt;/em&gt;&lt;/h3&gt;
&lt;img alt="" src="/images/income_group.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Projects"></category></entry><entry><title>Euler project</title><link href="https://yijiehe.github.io/articles/euler-project.html" rel="alternate"></link><published>2020-09-01T00:00:00+00:00</published><updated>2020-09-01T00:00:00+00:00</updated><author><name>Yijie</name></author><id>tag:yijiehe.github.io,2020-09-01:/articles/euler-project.html</id><summary type="html">&lt;p class="first last"&gt;Solutions of three Euler Project&lt;/p&gt;
</summary><content type="html">&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="special-pythagorean-triplet"&gt;
&lt;h2&gt;Special Pythagorean triplet&lt;/h2&gt;
&lt;div class="section" id="problem-9-solved-by-356556"&gt;
&lt;h3&gt;Problem 9: solved by 356556&lt;/h3&gt;
&lt;p&gt;A Pythagorean triplet is a set of three natural numbers, a &amp;lt; b &amp;lt; c, for
which,&lt;/p&gt;
&lt;p&gt;a2 + b2 = c2 For example, 32 + 42 = 9 + 16 = 25 = 52.&lt;/p&gt;
&lt;p&gt;There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.&lt;/p&gt;
&lt;div class="section" id="idea"&gt;
&lt;h4&gt;Idea:&lt;/h4&gt;
&lt;p&gt;To solve the problem, loop over all possible values of a, b, c, until
the condition is satisfied.&lt;/p&gt;
&lt;p&gt;The loop limits are set to 499, which is the limit for a, b, c to form a
triangle.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_pyth_trip&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;'''
    A function to find a special pythagorean triplet without any input.

    The special triangle: a + b + c = 1000
    '''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;499&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;499&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Triangle sides:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;'Product:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;find_pyth_trip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Triangle sides: 200 375 425
Product: 31875000
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="champernownes-constant"&gt;
&lt;h2&gt;Champernowneâ€™s constant&lt;/h2&gt;
&lt;div class="section" id="problem-40-sovled-by-78632"&gt;
&lt;h3&gt;Problem 40: sovled by 78632&lt;/h3&gt;
&lt;p&gt;An irrational decimal fraction is created by concatenating the positive
integers:&lt;/p&gt;
&lt;p&gt;0.123456789101112131415161718192021â€¦&lt;/p&gt;
&lt;p&gt;It can be seen that the 12th digit of the fractional part is 1.&lt;/p&gt;
&lt;p&gt;If dn represents the nth digit of the fractional part, find the value of
the following expression.&lt;/p&gt;
&lt;p&gt;d1 Ã— d10 Ã— d100 Ã— d1000 Ã— d10000 Ã— d100000 Ã— d1000000&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;Idea:&lt;/h4&gt;
&lt;p&gt;The Champernowneâ€™s constant is appending the natural numbers to decimal
point.&lt;/p&gt;
&lt;p&gt;So, keep adding the natural numbers until we get the desired digits,
and, find the product.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_cham_product&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;'''
    A function to find product of Champernowne's constant at specified digits without any input.
    '''&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;99999&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'The product is:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="n"&gt;find_cham_product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
The product is: 210
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="prime-summations"&gt;
&lt;h2&gt;Prime summations&lt;/h2&gt;
&lt;div class="section" id="problem-77-solved-by-18307"&gt;
&lt;h3&gt;Problem 77: solved by 18307&lt;/h3&gt;
&lt;p&gt;It is possible to write ten as the sum of primes in exactly five
different ways:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;7 + 3&lt;/div&gt;
&lt;div class="line"&gt;5 + 5&lt;/div&gt;
&lt;div class="line"&gt;5 + 3 + 2&lt;/div&gt;
&lt;div class="line"&gt;3 + 3 + 2 + 2&lt;/div&gt;
&lt;div class="line"&gt;2 + 2 + 2 + 2 + 2&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What is the first value which can be written as the sum of primes in
over five thousand different ways?&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;Idea:&lt;/h4&gt;
&lt;p&gt;ref: &lt;a class="reference external" href="https://oeis.org/A000607"&gt;The OEIS Foundation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Starting from a small number, which was chosen according to the
reference, and find all ways of summation.&lt;/p&gt;
&lt;p&gt;Then, increase the value and put it in the same loop. The algorythm is
described in the reference.&lt;/p&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prime_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;'''
    A function to generate prime numbers given an interval.

    start is the starting number, end is the ending number
    '''&lt;/span&gt;
    &lt;span class="n"&gt;primes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="c1"&gt;# Generate sequence of prime numbers&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;primes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prime_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code ipython3 literal-block"&gt;
&lt;span class="c1"&gt;# Solution&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ways&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ways&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;ways&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ways&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;First value written as the sum of primes &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;in over&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ways:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
First value written as the sum of primes
in over 5000 ways: 71
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Projects"></category></entry></feed>